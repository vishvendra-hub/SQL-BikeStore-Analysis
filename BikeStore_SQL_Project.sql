-- 1.	Retrieve all product names and their list prices from production.products.

-- SELECT product_name, list_price 
-- FROM production.products;


-- 2.	Find all customers who live in the city of New York.

-- SELECT first_name, last_name, city, state
-- FROM sales.customers
-- WHERE city = 'New York';


-- 3.	List all stores with their city and state.

-- SELECT store_name, city, state
-- FROM sales.stores;


-- 4.	Show all staff members and their assigned store names.

-- SELECT s.first_name, s.last_name, st.store_name
-- FROM sales.staffs s
-- JOIN sales.stores st
-- ON s.store_id = st.store_id;


-- 5.	Get all products that belong to the brand “Trek”.

-- SELECT p.product_name , b.brand_name
-- FROM production.products p
-- JOIN production.brands b 
-- ON b.brand_id = p.brand_id
-- WHERE b.brand_id = 9;


-- 6.	Find the total number of orders placed by each customer.

-- SELECT c.first_name, c.last_name, count(o.order_id) as total_orders
-- FROM sales.customers c
-- JOIN sales.orders o
-- ON o.customer_id = c.customer_id
-- GROUP BY c.first_name, c.last_name ;


-- 7.	List the top 5 most expensive products based on list_price.

-- SELECT product_name, list_price
-- FROM production.products 
-- ORDER BY list_price desc
-- LIMIT 5;


-- 8.Find the total sales revenue (quantity * list_price) generated by each store.

-- SELECT s.store_name, SUM(ot.quantity * ot.list_price * 1 - ot.discount) as total_revenue
-- FROM sales.stores s
-- JOIN sales.orders o
-- ON s.store_id = o.store_id
-- JOIN sales.order_items ot
-- ON ot.order_id = o.order_id
-- GROUP BY s.store_name;


-- 9.Retrieve the total stock available for each product across all stores.

-- SELECT p.product_id, p.product_name, SUM(s.quantity) as total_stocks
-- FROM production.products p
-- JOIN stocks s
-- ON p.product_id = s.product_id
-- GROUP BY p.product_id, p.product_name;


-- 10.	Show the number of staff members working in each store.

-- SELECT st.store_name, count(sf.store_id)
-- FROM sales.stores st
-- JOIN sales.staffs sf
-- ON st.store_id = sf.store_id
-- GROUP BY st.store_name;


-- 11.	Identify the top 3 customers who spent the most on completed orders (order_status = 4).

-- SELECT c.first_name, c.last_name, 
-- SUM(ot.quantity * ot.list_price * 1 - ot.discount) as total_spent
-- FROM sales.customers c
-- JOIN sales.orders o
-- ON c.customer_id = o.customer_id
-- JOIN sales.order_items ot
-- ON o.order_id = ot.order_id
-- WHERE o.order_status = '4'
-- GROUP BY c.first_name, c.last_name
-- ORDER BY total_spent desc
-- LIMIT 3;


-- 12.Get the best-selling product in terms of total quantity sold.

-- SELECT p.product_name, SUM(ot.quantity) as total_quantity
-- FROM production.products p 
-- JOIN sales.order_items ot
-- ON p.product_id = ot.product_id
-- GROUP BY p.product_name
-- ORDER BY total_quantity desc
-- LIMIT 1;


-- 13.Find the total discounts given across all orders.

-- SELECT SUM(quantity * list_price * discount ) as total_discount
-- FROM sales.order_items;



-- 14.Retrieve a list of products that have never been ordered.
 
-- SELECT p.product_id , p.product_name
-- FROM production.products p
-- LEFT JOIN sales.order_items ot
-- ON p.product_id = ot.product_id
-- WHERE ot.product_id IS NULL;

 
-- 15. Show the top 3 brands by total sales revenue.

-- SELECT b.brand_name,
--  SUM(ot.quantity * ot.list_price * 1 - ot.discount) as total_revenue
-- FROM production.brands b
-- JOIN production.products p
-- ON b.brand_id = p.brand_id
-- JOIN sales.order_items ot
-- ON ot.product_id = p.product_id
-- GROUP BY b.brand_name
-- ORDER BY total_revenue desc
-- LIMIT 3;


-- 16.Determine which staff member generated the highest revenue.

-- SELECT sf.first_name, sf.last_name, 
-- SUM(ot.quantity * ot.list_price * 1 - ot.discount) as staff_revenue
-- FROM sales.staffs sf
-- JOIN sales.orders o 
-- ON o.staff_id = sf.staff_id
-- JOIN sales.order_items ot
-- ON ot.order_id = o.order_id
-- GROUP BY sf.first_name, sf.last_name
-- ORDER BY staff_revenue desc
-- LIMIT 1;


-- 17.Find the most popular category (by total quantity sold).

-- SELECT c.category_name,SUM(ot.quantity) as total_quantity_sold
-- FROM production.categories c
-- JOIN production.products p
-- ON c.category_id = p.category_id
-- JOIN sales.order_items ot
-- ON ot.product_id = p.product_id
-- GROUP BY c.category_name
-- ORDER BY total_quantity_sold desc
-- LIMIT 1;


-- 18. Find the percentage contribution of each store to total sales.

-- SELECT st.store_name,
-- round((SUM(ot.quantity * ot.list_price * (1 - ot.discount)) /
-- (SELECT SUM(ot.quantity * ot.list_price * (1 - ot.discount))
-- FROM sales.order_items ot)) * 100, 2) AS pct_cintribution
-- FROM sales.order_items ot
-- JOIN sales.orders o ON ot.order_id = o.order_id
-- JOIN sales.stores st ON o.store_id = st.store_id
-- GROUP BY st.store_name; 